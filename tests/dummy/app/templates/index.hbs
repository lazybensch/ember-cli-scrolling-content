<div class='main'>

  <ul>
    <li>
      install: <b>ember install ember-cli-scrolling-content</b>
    </li>
    <li>
      don't miss the <a href='#advanced'>advanced section</a> below.
    </li>
    <li>
      fork the project <a href='https://github.com/lazybensch/ember-cli-scrolling-content'>on github</a>
    </li>
  </ul>

  <h3> Basics </h3>

  <article>
    <header> Simple Usage </header>
    <aside>
      <p>
        The scrolling content will always fit to its parent element. So if
        we provide a parent div with a width of 100px, our content will
        scroll - on hover - in this defined space.
      </p>
    {{code-snippet name="simple-usage.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET simple-usage -}}
<div class='parent'>
  {{#scrolling-content}}
    A B C D E F G H I J K L M
    N O P Q R S T U V W X Y Z
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Complex Dom </header>
    <aside>
      <p>
        Scrolling-content can not only handle raw text, but any html you provide.
      </p>
    {{code-snippet name="complex-dom.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET complex-dom -}}
<div class='parent'>
  {{#scrolling-content}}
    <nav>
      <div> one </div>
      <div> two </div>
      <div> three </div>
      <div class='footer'> four </div>
    </nav>
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Adjustable scroll speed </header>
    <aside>
      <p>
        Scrolling-content will (by default) scroll through its content with reasonable
        pixel-per-second speed. You can slow down by providing a speed value between 0 and 1 and
        increase scrolling speed by providing a value above 1.
      </p>
    {{code-snippet name="adjustable-scroll.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET adjustable-scroll -}}
<div class='parent'>
  {{#scrolling-content speed=2}}
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29
  {{/scrolling-content}}

  {{#scrolling-content speed=2}}
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Absolute scroll duration </header>
    <aside>
      <p>
        Sometimes however it would be nice to scroll through the content in a predefined
        duration. Maybe you want the scrolling animation to hit the end always after
        2 seconds no matter how long the content is. Note how the shorter text now scrolls
        slower to take the same absolute scrolling time as the longer one.
      </p>
    {{code-snippet name="absolute-scroll.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET absolute-scroll -}}
<div class='parent'>
  {{#scrolling-content duration=2000}}
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
    17 18 19 20 21 22 23 24 25 26 27 28 29
  {{/scrolling-content}}

  {{#scrolling-content duration=2000}}
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Customizable tagName and class </header>
    <aside>
      <p>
        You can freely customize the components tag name and class. In this example
        we've also set the duration to 0, making the component scroll without animation.
        However the component element will always be styled as display: block;
        by the addon.
      </p>
    {{code-snippet name="custom-tag.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET custom-tag -}}
<div class='parent'>
  {{#scrolling-content 
      duration=0 
      tagName='li'
      classNames='list-item'
  }}
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Resizes when content changes </header>
    <aside>
      <p>
        In some cases your content can change over time. You can make the scrolling-content
        component aware of the property in charge of that change and it will update to
        adjust scrolling motion and speed.
      </p>
    {{code-snippet name="resize.hbs"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET resize -}}
{{input value=value}}
<div class='parent'>
  {{#scrolling-content dependsOn=value}}
    {{value}}
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <h3 id='advanced'> Advanced </h3>

  <article>
    <header> Callbacks </header>
    <aside>
      <p>
        ember-cli-scrolling-content exposes two events that indicate when
        the content scrolled all the way to the right, or back to the left.
      </p>
    {{code-snippet name="callbacks.hbs"}}
    {{code-snippet name="foo-bar.js"}}
    </aside>

    <section>
{{!- BEGIN-SNIPPET callbacks -}}
<div class='parent'>
  {{#scrolling-content 
      onScrollForwardEnd=(action foo)
      didScrollBackward=(action bar)
  }}
    A B C D E F G H I J K L M
    N O P Q R S T U V W X Y Z
  {{/scrolling-content}}
</div>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> Control scrolling </header>
    <aside>
      <p>
        You can programmatically set the scroll direction of your content by
        setting the scrollForward property to either true or false. If you
        combine this functionality with the onScrollForwardEnd/onScrollBackwardEnd events
        described above you can produce quite complex behaviour. For example
        could you implement a scrolling-content that automatically scrolls
        back after is has reached the end.
      </p>
    {{code-snippet name="scrolling-control.hbs"}}
    {{code-snippet name="toggle-scrolling.js"}}
    </aside>

    <section class='center'>
{{!- BEGIN-SNIPPET scrolling-control -}}
<div class='parent'>
  {{#scrolling-content scrollForward=scrollForward}}
    A B C D E F G H I J K L M
    N O P Q R S T U V W X Y Z
  {{/scrolling-content}}
</div>
<button onclick={{action toggleScrolling}}>
  change scrolling direction
</button>
{{!- END-SNIPPET }}
    </section>
  </article>

  <article>
    <header> disable hover </header>
    <aside>
      <p>
          This is a more advanced example that is using a few concepts introduced above.
          by setting the components <b>hover</b> property to false it will not react to the users
          mouse anymore. Instead we control the scrolling with the <b>scrollForward</b> property and
          use the <b>onScrollForwardEnd</b> hook to let the component automatically scroll back
          once it scrolled all the way to the right.
      </p>
    {{code-snippet name="advanced-template.hbs"}}
    {{code-snippet name="advanced-actions.js"}}
    </aside>

    <section class='center'>
{{!- BEGIN-SNIPPET advanced-template -}}
<div class='parent'>
  {{#scrolling-content 
      scrollForward=started
      onScrollForwardEnd=(action goBack)
      hover=false
  }}
    <nav>
      <div> one </div>
      <div> two </div>
      <div> three </div>
      <div class='footer'> four </div>
    </nav>
  {{/scrolling-content}}
</div>
<button onclick={{action startScrolling}}>
  start scrolling
</button>
{{!- END-SNIPPET }}
    </section>
  </article>
</div>
